// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  HEALTH_PROFESSIONAL
  PATIENT
  MEDECIN
  ATHLETE
}

enum Specialty {
  NUTRITIONIST
  PHYSIOTHERAPIST
  PSYCHOLOGIST
  DOCTOR
  GENERAL
  RADIOLOGIST
  PEDIATRICIAN
  PHYSICAL_TRAINER
  DIETITIAN
}

enum ContactMethod {
  EMAIL
  PHONE
  SMS
}

enum ConsultationType {
  PRESENTIEL
  VISIO
  HYBRIDE
}

enum Disponibilite {
  DISPONIBLE
  OCCUPE
  CONGE
}

enum StatutConventionnement {
  SECTEUR_1
  SECTEUR_2
  NON_CONVENTIONNE
}

enum ModeReglement {
  CB
  ESPECES
  VIREMENT
  CHEQUE
  TIERS_PAYANT
}

enum NutritionalStatus {
  GOOD
  AVERAGE
  CRITICAL
}

enum ProgressionStatus {
  IMPROVING
  STAGNATING
  DECLINING
  WORSENING
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole
  phoneNumber       String?
  photoUrl          String?
  healthProfessional HealthProfessional?
  patient           Patient?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model HealthProfessional {
  id                  String     @id @default(cuid())
  user                User       @relation(fields: [userId], references: [id])
  userId              String     @unique
  specialty           Specialty
  subSpecialty        String?
  availability        Json
  preferredContactMethod ContactMethod
  emergencyContact    Boolean
  consultationTypes   ConsultationType[]
  consultationFee     Float
  conventionStatus    StatutConventionnement
  paymentMethods      ModeReglement[]
  acceptsHealthCard   Boolean
  description         String?
  yearsExperience    Int
  spokenLanguages    String[]
  openingTime        String
  closingTime        String
  consultationDuration Int
  workingDays        String[]
  disponibilite      Disponibilite
  averageWaitTime    Int
  street             String
  city               String
  postalCode         String
  country            String
  handicapAccess     Boolean
  parking            Boolean
  equipment          String[]
  acceptsEmergencies Boolean
  occupancyRate      Float
  adeliNumber        String?
  rppsNumber         String?
  diplomas           String[]
  programs           Program[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Patient {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @unique
  sport             String?
  injury            String?
  lastAppointment   DateTime?
  nutritionalStatus NutritionalStatus?
  progressionStatus ProgressionStatus?
  patientPathologies PatientPathology[]
  programs          Program[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Pathology {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  symptoms    String[]
  treatments  String[]
  patients    PatientPathology[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model PatientPathology {
  id          String    @id @default(cuid())
  patient     Patient   @relation(fields: [patientId], references: [id])
  patientId   String
  pathology   Pathology @relation(fields: [pathologyId], references: [id])
  pathologyId String
  diagnosis   String?
  severity    String?
  startDate   DateTime
  endDate     DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([patientId, pathologyId])
}

model Program {
  id                  String               @id @default(cuid())
  title              String
  description        String?
  startDate          DateTime
  endDate            DateTime?
  status             String               @default("ACTIVE")
  exercises          ProgramExercise[]
  patient            Patient              @relation(fields: [patientId], references: [id])
  patientId          String
  healthProfessional HealthProfessional   @relation(fields: [healthProfessionalId], references: [id])
  healthProfessionalId String
  mealTimes          MealTime[]
  supplements        Supplement[]         @relation("ProgramSupplement")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Exercise {
  id          String            @id @default(cuid())
  name        String
  description String?
  videoUrl    String?
  imageUrl    String?
  category    String
  difficulty  String
  equipment   String[]
  muscleGroups String[]
  programs    ProgramExercise[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProgramExercise {
  id        String   @id @default(cuid())
  program   Program  @relation(fields: [programId], references: [id])
  programId String
  exercise  Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  sets      Int?
  reps      Int?
  duration  Int?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id          String   @id @default(cuid())
  name        String
  category    String
  calories    Float
  proteins    Float
  carbs       Float
  fats        Float
  description String?
  isCustom    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mealTimes   MealTime[]
}

model Supplement {
  id          String    @id @default(cuid())
  name        String    @unique
  type        String
  description String?
  dosage      String?
  frequency   String?
  sideEffects String[]
  warnings    String[]
  imageUrl    String?
  isCustom    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  programs    Program[] @relation("ProgramSupplement")
}

model MealTime {
  id        String   @id @default(cuid())
  timeOfDay String   // 'breakfast', 'lunch', 'dinner'
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  food      Food     @relation(fields: [foodId], references: [id])
  foodId    String

  @@unique([programId, foodId])
}
