'use client';

/**
 * Service pour g√©rer les interactions avec l'API AI
 */
export const aiService = {
  /**
   * G√©n√©rer une r√©ponse automatique simulant le patient via l'API AI
   * @param {string} patientEmail - Email du patient pour identifier sa personnalit√©
   * @param {Array} conversationHistory - Historique de la conversation pour le contexte
   * @param {string} prompt - Instructions sp√©cifiques pour la g√©n√©ration (optionnel)
   * @returns {Promise<string>} - La r√©ponse g√©n√©r√©e
   */
  generatePatientResponse: async (patientEmail, conversationHistory, prompt = '') => {
    try {
      console.log(`AI Service: G√©n√©ration d'une r√©ponse pour ${patientEmail}`);
      console.log('Historique de conversation utilis√©:', conversationHistory?.length || 0, 'messages');
      
      // Afficher des informations d√©taill√©es pour le d√©bogage
      console.log('URL de l\'API:', '/api/ai-message');
      console.log('Donn√©es envoy√©es:', JSON.stringify({
        patientEmail,
        conversationHistory: conversationHistory?.slice(-3), // Affiche les 3 derniers messages pour √©viter une sortie trop longue
        prompt
      }, null, 2));
      
      const startTime = Date.now();
      console.log('D√©but de la requ√™te API √†:', new Date().toISOString());
      
      try {
        const response = await fetch('/api/ai-message', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            patientEmail,
            conversationHistory,
            prompt
          }),
        });

        console.log('R√©ponse API re√ßue apr√®s', (Date.now() - startTime), 'ms');
        console.log('Statut de la r√©ponse:', response.status, response.statusText);
        
        if (!response.ok) {
          console.error(`API Error with status ${response.status}`);
          const errorText = await response.text();
          console.error('D√©tails de l\'erreur API:', errorText);
          throw new Error(`Erreur API: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log(`R√©ponse re√ßue - Source: ${data.source || 'non sp√©cifi√©e'}`);
        console.log(`Contenu de la r√©ponse: "${data.response.substring(0, 50)}${data.response.length > 50 ? '...' : ''}"`);
        return data.response;
      } catch (fetchError) {
        console.error('Erreur lors de la requ√™te API:', fetchError);
        throw fetchError; // Propager l'erreur pour utiliser les r√©ponses de secours
      }
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration de la r√©ponse AI:', error);
      console.log("Utilisation de la r√©ponse de secours locale");
      
      // FORCER L'UTILISATION DES R√âPONSES DE SECOURS
      console.log('R√©ponse de secours forc√©e pour d√©boguer');
      
      // Utiliser des r√©ponses de fallback personnalis√©es selon le patient
      if (patientEmail === 'batman@wayne-enterprises.com') {
        console.log('R√©ponse re√ßue - Source: Fallback');
        return "J'ai not√© les modifications du r√©gime. Je devrais pouvoir les int√©grer malgr√© mes horaires nocturnes. Avez-vous des recommandations sp√©cifiques pour l'√©nergie √† long terme?";
      } else if (patientEmail === 'tony@stark-industries.com') {
        console.log('R√©ponse re√ßue - Source: Fallback');
        return "Int√©ressant ce nouveau compl√©ment... J'ai d√©j√† fait quelques ajustements sur sa composition mol√©culaire pour qu'il soit compatible avec mon r√©acteur Arc. √áa vous d√©range si j'am√©liore votre formule? üòè";
      } else if (patientEmail === 'clark.kent@dailyplanet.com') {
        console.log('R√©ponse re√ßue - Source: Fallback');
        return "Merci pour ces conseils, Dr. Tony. J'essaierai d'augmenter mes apports comme sugg√©r√©. Mon m√©tabolisme est... particuli√®rement rapide, donc les 5000 calories me semblent encore un peu justes. üôÇ";
      } else if (patientEmail === 'selina.kyle@catwoman.com') {
        console.log('R√©ponse re√ßue - Source: Fallback');
        return "Vos recommandations sont int√©ressantes... Je pr√©f√®re n√©anmoins garder une certaine flexibilit√© dans mon r√©gime, surtout pendant mes activit√©s nocturnes. Les prot√©ines suppl√©mentaires sont appr√©ci√©es. üòº";
      } else {
        console.log('R√©ponse re√ßue - Source: Fallback');
        return "J'ai bien re√ßu vos recommandations et je vais essayer de les suivre. Pourriez-vous me pr√©ciser les horaires id√©aux pour ces repas?";
      }
    }
  }
};

export default aiService;
